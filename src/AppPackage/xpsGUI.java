/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package AppPackage;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import static java.util.Collections.list;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

import java.awt.Color; 
import java.awt.BasicStroke; 
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.Point;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.geom.Ellipse2D;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Scanner;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import org.jfree.chart.ChartPanel; 
import org.jfree.chart.JFreeChart; 
import org.jfree.data.xy.XYDataset; 
import org.jfree.data.xy.XYSeries; 
import org.jfree.ui.ApplicationFrame; 
import org.jfree.ui.RefineryUtilities; 
import org.jfree.chart.plot.XYPlot; 
import org.jfree.chart.ChartFactory; 
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.data.xy.XYSeriesCollection; 
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.util.ShapeUtilities;


/**
 *
 * @author Diego Sabbagh
 * @motivator Michele Montanari
 * @inspirer Daniele Borsatto
 * Special thanks to Andrea Scaparro
 */
public class xpsGUI extends javax.swing.JFrame {
    
    String createdName = null;
    String createdPath = null;
    
    boolean firstClickTextField = true;
    
    JDialog logDialog;
    JTextArea logTextArea = new JTextArea("Date: ");
    
    JFreeChart xpsDataChart;

    /**
     * Creates new form xpsGUI
     */
    public xpsGUI() {
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("Icon_3.png")).getImage());
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FileNameField = new javax.swing.JTextField();
        BrowseButton = new javax.swing.JButton();
        ConvertButton = new javax.swing.JButton();
        plotButton = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        versionLabel = new javax.swing.JLabel();
        logLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("XPS Converter");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        FileNameField.setText("Enter file name and path here...");
        FileNameField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                FileNameFieldMouseClicked(evt);
            }
        });

        BrowseButton.setText("Browse");
        BrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseButtonActionPerformed(evt);
            }
        });

        ConvertButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ConvertButton.setText("Convert");
        ConvertButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ConvertButton.setContentAreaFilled(false);
        ConvertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConvertButtonActionPerformed(evt);
            }
        });

        plotButton.setText("Plot");
        plotButton.setEnabled(false);
        plotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotButtonActionPerformed(evt);
            }
        });

        exportButton.setText("Export");
        exportButton.setEnabled(false);
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        versionLabel.setText("Version: 29th August 2016");
        versionLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        logLabel.setText("Show log \u2192");
        logLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(versionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(logLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(FileNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(ConvertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BrowseButton)
                            .addComponent(plotButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(exportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FileNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BrowseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ConvertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(plotButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(versionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logLabel)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseButtonActionPerformed
        // Pressing the Browse Button
        
        FileFilter filter = new FileNameExtensionFilter("XPS data (.dif)","dif");
        final JFileChooser fc = new JFileChooser();
            //fc.addChoosableFileFilter(filter);
            fc.setFileFilter(filter);
        fc.showOpenDialog(this); //open file chooser dialog
        File chosenFile = fc.getSelectedFile();

        String chosenFileName = chosenFile.getAbsolutePath(); //get the path of the chosen file
            int j = chosenFileName.lastIndexOf(".");
            String checkName = chosenFileName.substring(j+1); // get the file extension
        
        if(checkName.equals("dif") || checkName.equals("DIF")){
        FileNameField.setText(chosenFileName); //copy the path to the text filed
        }
        else{
        JOptionPane.showMessageDialog(null, chosenFileName+" is not a data file!","Warning",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_BrowseButtonActionPerformed

    private int ConvertFile(String fileName){
        // Convert the file
        
        int j = fileName.lastIndexOf(".");
        String checkName = fileName.substring(j+1); //get the file extension
        
        if(checkName.equals("dif") || checkName.equals("DIF")){
        
         // - open fileName and read data
            try {
            int rigaUpper = 199; //spectrum upper limit
            int rigaRange = 201; //spectrum range
            int rigaeVStep = 203;//spectrum eV/step
            int rigaDataStart = 231; // first data
            int rigamsStep = 205; // ms/step
            int rigaSweeps = 207; // number of sweeps
            
            String sUpper = null;
            String sRange = null;
            String seVStep = null;
            String sSweeps = null;
            String smsStep = null;
            
            // get the needed values as strings, then converted to float 
            FileReader fr01 = new FileReader(fileName);
            BufferedReader br01 = new BufferedReader(fr01);
            for(int i=0; i<rigaUpper-1; ++i){
            try {br01.readLine();  } catch(Exception e){ }}
            try { br01.skip(3);
                sUpper = br01.readLine();} catch (IOException ex) { }
            float nUpper = Float.parseFloat(sUpper);
            br01.close();
            fr01.close();
            
            FileReader fr02 = new FileReader(fileName);
            BufferedReader br02 = new BufferedReader(fr02);
            for(int i=0; i<rigaRange-1; ++i){
            try {br02.readLine();  } catch(Exception e){ }}
            try { br02.skip(3);
                sRange = br02.readLine();} catch (IOException ex) { }
            float nRange = Float.parseFloat(sRange);
            br02.close();
            fr02.close();
            
            FileReader fr03 = new FileReader(fileName);
            BufferedReader br03 = new BufferedReader(fr03);
            for(int i=0; i<rigaeVStep-1; ++i){
            try {br03.readLine();  } catch(Exception e){ }}
            try { br03.skip(3);
                seVStep = br03.readLine();} catch (IOException ex) { }
            float neVStep = Float.parseFloat(seVStep);
            br03.close();
            fr03.close();
            
            FileReader fr05 = new FileReader(fileName);
            BufferedReader br05 = new BufferedReader(fr05);
            for(int i=0; i<rigaSweeps-1; ++i){
            try {br05.readLine();  } catch(Exception e){ }}
            try { br05.skip(2);
                sSweeps = br05.readLine();} catch (IOException ex) { }
            float nSweeps = Float.parseFloat(sSweeps);
            br05.close();
            fr05.close();
            
            FileReader fr06 = new FileReader(fileName);
            BufferedReader br06 = new BufferedReader(fr06);
            for(int i=0; i<rigamsStep-1; ++i){
            try {br06.readLine();  } catch(Exception e){ }}
            try { br06.skip(3);
                smsStep = br06.readLine();} catch (IOException ex) { }
            float nmsStep = Float.parseFloat(smsStep);
            br06.close();
            fr06.close();
            
            float scalefactor = nSweeps*nmsStep/1000; // to get counts/s intead of total counts
            
          // - create x axis
            
            float nLower = nUpper - nRange;
            int nPoints = (int) (nRange/neVStep);
            float[] xAxis = new float[ nPoints+1];
            xAxis[0] = nLower;
            
            for(int i=1; i<xAxis.length; i++){
                xAxis[i]=xAxis[i-1]+neVStep;
            }
            

          // - create y axis
            
            FileReader fr04 = new FileReader(fileName);
            BufferedReader br04 = new BufferedReader(fr04);
            
            float[] yAxis = new float[nPoints+1];
            for(int i=0; i<rigaDataStart-1; i++){
               try {br04.readLine();  } catch(Exception e){ } }
            
            for(int i=0; i<yAxis.length; i++){
            try { br04.skip(3);
                yAxis[i] = (Float.parseFloat(br04.readLine()))/scalefactor;
                br04.readLine();            
            } catch (IOException ex) { }                

            }
            
            //reverse yAxis
            for(int k=0; k<yAxis.length/2; k++){
                float temp = yAxis[k];
                yAxis[k]=yAxis[yAxis.length-(1+k)];
                yAxis[yAxis.length-(1+k)]=temp;
            }
            
          // - write the file
            
            // get file name and change extension
            String newPathTemp = fileName.substring(0, fileName.length()-3);
            String newPath = newPathTemp+"dat";
            createdPath = newPath; 
            
            // open a new file
            File provaFile = new File(newPath);
            provaFile.createNewFile();
                String name = provaFile.getName();
            
            // write x and y data in the file
            FileWriter fw = new FileWriter(provaFile.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);
            for(int i=0; i<xAxis.length; i++){
            String sX = Float.toString(xAxis[i]);
            String sY = Float.toString(yAxis[i]);
            bw.write(sX); bw.write("\t"); bw.write(sY); bw.newLine();}
            bw.close();

          DateFormat timeFormat = new SimpleDateFormat("HH':'mm ");
          Date startingDate = new Date();
          String logTime = timeFormat.format(startingDate);
          String actionPerformed = "File "+name+" converted.";
          logTextArea.append(logTime+actionPerformed+"\n");
        
          JOptionPane.showMessageDialog(null, "File "+name+" successfully converted");
          plotButton.setEnabled(true);
        
          createdName = name;
          }
          catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null,"Unable to open file","Warning",JOptionPane.WARNING_MESSAGE);
            
            DateFormat timeFormat = new SimpleDateFormat("HH':'mm ");
            Date startingDate = new Date();
            String logTime = timeFormat.format(startingDate);
            String actionPerformed = "Failed attempt to open file "+fileName;
            logTextArea.append(logTime+actionPerformed+"\n");
            
          } catch (IOException ex) {
            //Logger.getLogger(xpsGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,"Unable to read file","Warning",JOptionPane.WARNING_MESSAGE);
            
            DateFormat timeFormat = new SimpleDateFormat("HH':'mm ");
            Date startingDate = new Date();
            String logTime = timeFormat.format(startingDate);
            String actionPerformed = "Failed attempt to read file "+fileName;
            logTextArea.append(logTime+actionPerformed+"\n");
            
            }        
        }//closes the if statement
        else if(fileName.equals("Enter file name and path here...") || fileName.equals("")){
         JOptionPane.showMessageDialog(null, "Please select an XPS data file","Warning",JOptionPane.WARNING_MESSAGE);   
        }
        else{
        JOptionPane.showMessageDialog(null, fileName+" is not a data file or it does not exist!","Error",JOptionPane.ERROR_MESSAGE);
        return 1;
        }
    
    return 0;}
    
    private void ConvertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConvertButtonActionPerformed
        // Pressing Convert Button
        
        String fileName = FileNameField.getText(); //get the file name from the FileNameField
        ConvertFile(fileName);
        
    }//GEN-LAST:event_ConvertButtonActionPerformed

    private void plotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotButtonActionPerformed
        
        FileReader myReader = null;
        try {
            
            // open the file .dat just created to chekc length
            myReader = new FileReader(createdPath);
            BufferedReader myBR = new BufferedReader(myReader);
            
            int size=0;
            try{ while(myBR.readLine() != null ) size++;}catch(Exception e){}
                       
            float[] xAxisChart = new float[size];
            float[] yAxisChart = new float[size];
            
            try{ myBR.close();}catch(Exception e){}
            
            // open again the file to read data
            File datFile = new File(createdPath);
            Scanner scan = new Scanner(datFile);
            
            int k=0; 
            while(scan.hasNext()){
                xAxisChart[k]=scan.nextFloat();
                yAxisChart[k]=scan.nextFloat(); k++;
            } scan.close();

            // create dataset
            final XYSeries data = new XYSeries(createdName);
            for(int j=0; j<xAxisChart.length; j++){
                data.add(xAxisChart[j] , yAxisChart[j]);
            } data.delete(0, 0); //remove the first point (origin), probably created with initialization
            final XYSeriesCollection dataSet = new XYSeriesCollection();
            dataSet.addSeries(data);
            
            // create plot
            JFreeChart xpsChart = ChartFactory.createXYLineChart("XPS Spectrum", "Binding Energy (eV)", "Counts/s", dataSet);
            ChartPanel chartPanel = new ChartPanel( xpsChart );
            chartPanel.setPreferredSize( new java.awt.Dimension( 560 , 367 ) );     
            
            final XYPlot plot = xpsChart.getXYPlot( );
            
            XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer( );
            renderer.setSeriesPaint( 0 , Color.RED );
            renderer.setSeriesShape(0, new Ellipse2D.Double(-1.5, -1.5, 3.0, 3.0));
            renderer.setSeriesStroke( 0 , new BasicStroke( 1.0f ) );
            renderer.setSeriesShapesVisible(0, false);//to hide dots
            
            NumberAxis yAxis =(NumberAxis) plot.getRangeAxis();
            yAxis.setAutoRangeIncludesZero(false);

            plot.setRenderer( renderer ); 
            
            
            //JPanel pan1 = new JPanel();
            //pan1.add(chartPanel, BorderLayout.CENTER);

            /*JFrame frame = new JFrame();
            //frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.setSize(600,420);
            frame.setVisible(true);
            frame.add(pan1);*/
            
            /*
            JDialog dialogWindow = new JDialog();
            dialogWindow.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            dialogWindow.setLayout(new FlowLayout(FlowLayout.CENTER,0,0));
            //dialogWindow.setSize(600,420);
            dialogWindow.setVisible(true);
            dialogWindow.add(pan1);
            dialogWindow.pack();
            dialogWindow.setResizable(false);
            */
            
            JFrame chartFrame = new JFrame();
            chartFrame.setTitle("XPS Plot");
            chartFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);            
            chartFrame.setPreferredSize( new java.awt.Dimension( 600 , 420 ) );
            chartFrame.setVisible(true);
            chartFrame.add(chartPanel);
            chartFrame.pack();
            chartFrame.setLocationRelativeTo(null); //start the frame in the center of the screen. don't call it earlier!        
            chartFrame.setResizable(true);
            
            
            exportButton.setEnabled(true);            
            xpsDataChart = xpsChart;
            
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(xpsGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,"File not found","Warning",JOptionPane.WARNING_MESSAGE);
        } finally {
            try {
                myReader.close();
            } catch (IOException ex) {
                Logger.getLogger(xpsGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
 
    }//GEN-LAST:event_plotButtonActionPerformed

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        
        String savePathTemp = createdPath.substring(0, createdPath.length()-3);
            String savePath = savePathTemp+"png";
        
      int width = 640; // Width of the image
      int height = 480; // Height of the image 
      File XYChart = new File( savePath ); 
        try {
            ChartUtilities.saveChartAsPNG( XYChart, xpsDataChart, width, height);
            String savedPNG = XYChart.getName();
            
            DateFormat timeFormat = new SimpleDateFormat("HH':'mm ");
            Date startingDate = new Date();
            String logTime = timeFormat.format(startingDate);
            String actionPerformed = "Plot "+savedPNG+" saved.";
            logTextArea.append(logTime+actionPerformed+"\n");
            
            JOptionPane.showMessageDialog(null, "Plot "+savedPNG +" successfully exported");
            
        } catch (IOException ex) {
            Logger.getLogger(xpsGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Unable to export plot","Error",JOptionPane.ERROR_MESSAGE);
            
            DateFormat timeFormat = new SimpleDateFormat("HH':'mm ");
            Date startingDate = new Date();
            String logTime = timeFormat.format(startingDate);
            String actionPerformed = "Failed attempt to save plot "+savePath;
            logTextArea.append(logTime+actionPerformed+"\n");
            
        }
        
    }//GEN-LAST:event_exportButtonActionPerformed

    private void FileNameFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FileNameFieldMouseClicked
        if (firstClickTextField == true){
        FileNameField.setText(null); //clear the text field the first time you click on it
        firstClickTextField = false;
        }
    }//GEN-LAST:event_FileNameFieldMouseClicked

    private void logLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logLabelMouseClicked
        logDialog.setVisible(true);
        
        Point framePosition = this.getLocation();    //get location of the main window
         double frameX = framePosition.getX();
         double frameY = framePosition.getY();
        logDialog.setLocation( (int)frameX + this.getWidth(), (int)frameY ); 
    }//GEN-LAST:event_logLabelMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // save log into a text file
        
            // open a new file            
           try{
            int j = createdPath.lastIndexOf("\\");
            String logFilePath = createdPath.substring(0, j);
            
            DateFormat dayFormat = new SimpleDateFormat("yyyyMMdd't'HHmm");
            Date startingDate = new Date();
            String logDate = dayFormat.format(startingDate);
                        
            File logFile = new File(logFilePath+"\\xps"+logDate+".log");
            //File logFile = new File(logFilePath+"\\xps.log"); // use it for debugging
            logFile.createNewFile();
                        
            FileWriter fw = new FileWriter(logFile.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);            
            logTextArea.write(bw);            
            bw.close();
            
            JOptionPane.showMessageDialog(null, "Log file has been saved in the folder of the last dif file converted.\n"+"Application will now exit.");
            System.exit(0);
            }
           catch(Exception e){
            JOptionPane.showMessageDialog(null, "Unable to save log file!","Error",JOptionPane.ERROR_MESSAGE);            
            System.out.println("Program closed during the exception catch.");
            System.exit(0);
            }
           finally {
            System.exit(1);
            }    
        
    }//GEN-LAST:event_formWindowClosing
    
    public void createLogWindow(JFrame parent){
    
    logDialog = new JDialog(parent);
    logDialog.setDefaultCloseOperation(HIDE_ON_CLOSE);
    logDialog.setTitle("Performed operation log");    
    logDialog.setPreferredSize( new java.awt.Dimension( 350 , 200 ) );
    Point parentPosition = parent.getLocation();    //get location of the main window
        double parentX = parentPosition.getX();
        double parentY = parentPosition.getY();
    logDialog.setLocation( (int)parentX + parent.getWidth(), (int)parentY );    
    logDialog.setResizable(false);
    logDialog.setVisible(false);
    
    // log text properties
    logTextArea.setEditable(false);
    
    DateFormat dayFormat = new SimpleDateFormat("dd MMMM yyyy");
    Date startingDate = new Date();
    String strDate = dayFormat.format(startingDate);
    logTextArea.append(strDate+"\n"+"\n");
    
    //create a panel and add the log text area
    JScrollPane scrollPane = new JScrollPane(logTextArea);
    scrollPane.setSize(350,200);
    //ad the panel to the dialog wiondow     
    logDialog.add(scrollPane);
    logDialog.pack();    
    }
    
    /**
     * @param args the command line arguments
     */
        
    public static void main(String args[]) {
        Locale.setDefault(Locale.ENGLISH);
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(xpsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(xpsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(xpsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(xpsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        try{UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");}
        catch (Exception e){}        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                xpsGUI myFrame = new xpsGUI();//.setVisible(true);
                myFrame.setVisible(true);
                myFrame.createLogWindow(myFrame);
                
              //implement drag and drop
                myFrame.FileNameField.setDropTarget(new DropTarget() {
                 public synchronized void drop(DropTargetDropEvent evt) {
                  try {
                   evt.acceptDrop(DnDConstants.ACTION_COPY);
                   List<File> droppedFiles = (List<File>) evt.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);
                   
                   for (File file : droppedFiles) {
                    String draggedFile = file.getAbsolutePath();
                    myFrame.FileNameField.setText(draggedFile);
                    int control = myFrame.ConvertFile(draggedFile);
                    if (control == 1){
                      JOptionPane.showMessageDialog(null,"Unable to convert file "+draggedFile,"Error",JOptionPane.ERROR_MESSAGE);
            
                      DateFormat timeFormat = new SimpleDateFormat("HH':'mm ");
                      Date startingDate = new Date();
                      String logTime = timeFormat.format(startingDate);
                      String actionPerformed = "Unable to convert file "+draggedFile;
                      myFrame.logTextArea.append(logTime+actionPerformed+"\n");  
                    }
                   };
                   
                  } catch (Exception ex) {
                    
                      JOptionPane.showMessageDialog(null,"Unable to perform drag-drop operation!","Error",JOptionPane.ERROR_MESSAGE);
            
                      DateFormat timeFormat = new SimpleDateFormat("HH':'mm ");
                      Date startingDate = new Date();
                      String logTime = timeFormat.format(startingDate);
                      String actionPerformed = "Unable to perform drag-drop operation.";
                      myFrame.logTextArea.append(logTime+actionPerformed+"\n");
                    }
                 }
                });//end drag and drop
                              }//end of run()
                                       });//end of Runnable()
    }//end of main

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BrowseButton;
    private javax.swing.JButton ConvertButton;
    private javax.swing.JTextField FileNameField;
    private javax.swing.JButton exportButton;
    private javax.swing.JLabel logLabel;
    private javax.swing.JButton plotButton;
    private javax.swing.JLabel versionLabel;
    // End of variables declaration//GEN-END:variables
}
